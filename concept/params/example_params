# This is an example parameter file to the COùòïCEPT code,
# showcasing the many possible parameters.
# When defining parameters, the following tips and tricks may be used:
# - Parameters can be specified as any valid Python 3 expression.
# - Parameters may be defined in terms of other parameters/variables.
#   Unlike normal Python code, the order of definitions is not important.
# - Mathematical as well as NumPy functions and constants are available.
# - Physical units may and should be used where applicable.
# - Absolute paths defined in the .paths file may be accessed
#   via the paths dict. Relative paths will be understood
#   with respect to the concept directory.
# - Should you wish to define non-parameter helper variables,
#   let their name begin with an underscore in order to suppress
#   the 'unknown parameter specified' warning.
# - Repeated values in dictionaries may be succinctly declared
#   by an ellipsis (...).
# - Some parameters will be inferred from others and must not be
#   defined explicitly. Below is the complete list of such parameters.
#     h : Inferred from H0, defined to be H0/(100*km/(s*Mpc)).
#     Œ©ŒΩ: Inferred from the values of 'N_ncdm', 'deg_ncdm' and 'm_ncdm'
#         in the class_params dictionary.



# Non-parameter variable used to control the size of the simulation
_size = 64

# Input/output
initial_conditions = [  # Initial condition snapshot file or container of components to be generated
    # Matter component
    {
        'species': 'matter',
        'N'      : _size**3,
    },
    # Neutrino component
    {
        'species'          : 'neutrinos',
        'gridsize'         : _size,
        'boltzmann order'  : 1,
        'boltzmann closure': 'class',
    },
]
snapshot_type = 'standard'  # Type of output snapshots
output_dirs = {  # Directories for storing output
    'snapshot' : paths['output_dir'] + '/' + basename(paths['params']),
    'powerspec': ...,
    'render2D' : ...,
    'render3D' : ...,
    'autosave' : paths['ics_dir'],
}
output_bases = {  # File basenames of output
    'snapshot' : 'snapshot',
    'powerspec': 'powerspec',
    'render2D' : 'render2D',
    'render3D' : 'render3D',
}
output_times = {
    'a': {  # Scale factor values at which to dump output
        'snapshot' : logspace(log10(a_begin), log10(1), 5),
        'powerspec': ...,
        'render2D' : 1,
        'render3D' : [a_begin, 1],
    },
    't': {  # Cosmic times at which to dump output
        'snapshot' : '',
        'powerspec': '',
        'render2D' : '',
        'render3D' : '',
     },
}
autosave_interval = 12*hr  # How often to dump autosave snapshot
snapshot_select = {  # Select which components to save in snapshots
    'all': True,
}
powerspec_select = {  # Toggle power spectra computation for individual and sets of components
    'all'             : {'data': True, 'linear': True, 'plot': True},
    'all combinations': {'data': True, 'linear': True, 'plot': False},
}
render2D_select = {  # Toggle 2D rendering for individual and sets of components
    'matter'   : {'data': False, 'image': True,  'terminal image': True},
    'neutrinos': {'data': False, 'image': False, 'terminal image': False},
}
render3D_select = {  # Toggle rendering for each component
    'all': True,
}
life_output_order = (  # Ordering of component activations/terminations relative to output dumps
    'terminate', 'activate', 'dump',
)
class_plot_perturbations = False  # Plot CLASS perturbations?
class_extra_background = {}       # Extra CLASS background variables to dump
class_extra_perturbations = {}    # Extra CLASS perturbations to dump

# Numerical parameters
boxsize = 512*Mpc  # Linear size of the simulation box
potential_gridsizes = {
    'global': {
        'gravity': {
            'p3m': 2*_size,
            'pm' :   _size,
        },
    },
    'matter': {
        'gravity': {
            'p3m': (2*_size, 2*_size),
        },
    },
    'neutrinos': {
        'gravity': {
            'pm': _size,
        },
    },
}
force_interpolations = {  # Particle interpolation orders to use for each long-range force and method
    'gravity': {
        'pm' : 'CIC',
        'p3m': 'CIC',
    },
}
force_interlacings = {  # Use interlaced particle potential grids, for each long-range force and method?
    'gravity': {
        'pm' : False,
        'p3m': False,
    },
}
force_differentiations = {  # Order (number of grid points) to use for potential grid differentiation, for each long-range force and method
    'gravity': {
        'pm' : 2,
        'p3m': 4,
   },
}
force_from_global_potentials = {  # Obtain force from the global potential (alternatively from the downstream potentials)?
    'gravity': {
        'pm' : True,
        'p3m': True,
   },
}
ewald_gridsize = 64  # Linear grid size of the grid of Ewald corrections
shortrange_params = {  # Short-range force parameters for each short-range force
    'gravity': {
        'scale'    : '1.25*boxsize/gridsize',  # The long/short-range force split scale
        'range'    : '4.5*scale',              # Maximum reach of short-range force
        'subtiling': 'automatic',              # Subtile decomposition
    },
}
powerspec_options = {  # Specifications of power spectra for individual and sets of components
    'upstream gridsize': {  # Linear upstream grid sizes
        'particles': '2*cbrt(N)',
        'fluid'    : 'gridsize',
    },
    'global gridsize': {  # Linear global grid sizes
        'default': -1,
    },
    'interpolation': {  # Particle interpolation order
        'default': 'PCS',
    },
    'deconvolution': {  # Perform deconvolution for particles?
        'default': True,
    },
    'interlacing': {  # Use interlaced grids for particles?
        'default': True,
    },
    'binsize': {  # Linear width of each power spectrum bin
        'default': 2*œÄ/boxsize,
    },
    'significant figures': {  # Number of significant figures in output
        'default': 8,
    },
}
R_tophat = 8*Mpc/h  # Radius of tophat used to compute the rms density variation from power spectra
k_modes_per_decade = {  # Number of k modes per decade in CLASS computations
    3e-3/Mpc: 10,
    3e-2/Mpc: 30,
    3e-1/Mpc: 30,
    1   /Mpc: 10,
}

# Cosmology
H0 = 67*km/(s*Mpc)  # The Hubble constant
Œ©cdm = 0.27 - Œ©ŒΩ    # Density parameter for cold dark matter
Œ©b = 0.049          # Density parameter for baryonic matter
a_begin = 0.02      # Scale factor at beginning of simulation
primordial_spectrum = {  # Parameters for the analytic primordial spectrum
    'A_s'  : 2.1e-9,    # Amplitude
    'n_s'  : 0.96,      # Tilt / spectral index
    'Œ±_s'  : 0,         # Tilt running
    'pivot': 0.05/Mpc,  # Pivot scale
}
class_params = {  # CLASS parameters. See the CLASS documentation for details.
    'N_ur'                    : 0,
    'N_ncdm'                  : 1,
    'deg_ncdm'                : 3,
    'm_ncdm'                  : 1/3,
    'l_max_ncdm'              : 100,
    'Number of momentum bins' : 25,
    'Quadrature strategy'     : 2,
    'ncdm_fluid_approximation': 3,
}

# Physics
select_forces = {  # Forces and methods which act on each component
    'particles': {'gravity': 'p3m'},
    'fluid'    : {'gravity': 'pm'},
}
select_class_species = {  # CLASS species to use for each component
    'all': 'default',
}
select_eos_w = {  # Equation of state parameter w for each component
    'all': 'class',
}
select_boltzmann_order = {  # Boltzmann order for each component
    'all': 1,
}
select_boltzmann_closure = {  # Closure rule for the Boltzmann hierarchy for each component
    'all': 'class',
}
select_realization_options = {  # Realization options for each component and variable
    'all': {
        # Particle variables
        'pos': {
            'interpolation': 'CIC',
            'back-scaling' : False,
        },
        'mom': {
            'interpolation'                : 'CIC',
            'back-scaling'                 : False,
            'velocities from displacements': False,
        },
        # Fluid variables
        'œ±': {
            'back-scaling': False,
        },
        'J': {
            # Linear realization options
            'back-scaling': False,
            # Non-linear realization options
            'structure'     : 'primordial',
            'compound-order': 'linear',
        },
        'ùí´': {
            # Linear realization options
            'back-scaling': False,
            # Non-linear realization options
            'structure': 'non-linear',
        },
        'œÇ': {
            # Linear realization options
            'back-scaling': False,
            # Non-linear realization options
            'structure'     : 'non-linear',
            'compound-order': 'linear',
        },
    },
}
select_lives = {  # Time (scale factor value) of birth and death for each component
    'all': (0, inf),
}
select_approximations = {  # Toggle approximations for each component
    'all': {
        'P = wœÅ': False,
    },
}
select_softening_length = {  # Gravitational softening for each component
    'particles': '0.03*boxsize/cbrt(N)',
}

# Simulation options
Œît_base_background_factor = 1       # This scales the 'background' time step limiters
Œît_base_nonlinear_factor = 1        # This scales the 'non-linear' time step limiters
Œît_rung_factor = 1                  # This scales the rung time step size needed for a given short-range acceleration
Œîa_max_increasing = 0.022           # Maximum allowed change in scale factor over a time step
static_timestepping = None          # File to write/read static time-stepping information to/from
N_rungs = 10                        # Number of available rungs for adaptive time stepping
fftw_wisdom_rigor = 'measure'       # Rigor level when acquiring FFTW wisdom
fftw_wisdom_reuse = True            # Reuse FFTW wisdom from earlier runs?
random_seed = 1                     # Seed for pseudo-random numbers
primordial_amplitude_fixed = False  # Replace Gaussian noise with noise of fixed amplitude and uniform random phase?
primordial_phase_shift = 0          # Phase shift when using fixed amplitude (set to œÄ for paired simulations)
fourier_structure_caching = {       # Cache and reuse primordial and component-specific Fourier grids?
    'primordial': True,
    'all'       : True,
}
fluid_scheme_select = {             # Fluid evolution scheme for each component
    'all': 'MacCormack',
}
fluid_options = {  # Specifications of fluid scheme parameters
    'MacCormack': {
        'vacuum_corrections_select': {  # Toggle vacuum corrections
            'all': True,
        },
        'max_vacuum_corrections_select': {  # Max number of vacuum corrections in the two MacCormack steps
            'all': (1, 'gridsize'),
        },
        'foresight_select': {  # Number of time steps to look ahead when doing vacuum corrections
            'all': 25,
        },
        'smoothing_select': {  # Amount of smoothing to apply when doing vacuum correction
            'all': 1.0,
        },
    },
    'Kurganov-Tadmor': {
        'Runge-Kutta order': {  # Order of time integration
            'all': 2,
        },
        'flux_limiter_select': {  # Flux limiter function
            'all': 'mc',
        },
    },
}
class_k_max = {}                # Maximum trusted k for individual perturbations
class_reuse = True              # Reuse CLASS results from earlier runs?

# Graphics
terminal_width = 80                # Maximum width of terminal output, in characters
enable_terminal_formatting = True  # Use formatted terminal output (e.g. colors)
suppress_output = {                # Suppress terminal output matching these regexes
    'out': (),
    'err': (),
    'all': (),
}
render2D_options = {  # Specifications of 2D renders for individual and sets of components
    'upstream gridsize': {  # Linear upstream grid sizes
        'particles': 'cbrt(N)',
        'fluid'    : 'gridsize',
    },
    'global gridsize': {  # Linear global grid sizes
        'default': -1,
    },
    'terminal resolution': {  # Resolution (in characters) of terminal images
        'default': terminal_width,
    },
    'interpolation': {  # Particle interpolation order
        'default': 'PCS',
    },
    'deconvolution': {  # Perform deconvolution for particles?
        'default': False,
    },
    'interlacing': {  # Use interlaced grids for particles?
        'default': False,
    },
    'axis': {  # Projection axis
        'default': 'z',
    },
    'extent': {  # Interval to include along the projected axis
        'default': (0, 0.1*boxsize),
    },
    'colormap': {  # Colormap for 2D render images and terminal images
        'default': 'inferno',
    },
    'enhance': {  # Toggle non-linear contrast enhancement of 2D render images and terminal images
        'default': True,
    },
}
render3D_colors = {  # Color to use in 3D renders for each component
    'matter'   : 'lime',
    'neutrinos': 'r',
}
render3D_bgcolor = 'black'  # Background color of 3D renders
render3D_resolution = 1080  # The height and width of 3D renders

# System of units
unit_length = 'Mpc'    # Physical length corresponding to a numerical value of 1.0
unit_time = 'Gyr'      # Physical time   corresponding to a numerical value of 1.0
unit_mass = '10¬π‚Å∞ m‚òâ'  # Physical mass   corresponding to a numerical value of 1.0

# Debugging options
print_load_imbalance = True    # Print the CPU load imbalance after each time step?
particle_reordering = True     # Allow in-memory particle reordering?
enable_Hubble = True           # Enable Hubble expansion?
enable_class_background = True # Use CLASS to compute the evolution of the background?
enable_debugging = False       # Enable debugging mode?

