#!/usr/bin/env bash

# This script runs the same, random initial conditions with different numbers
# of processes and compares the result. The PP algorithm is used.

# Number of processes to use
nprocs_list=(1 2 4 8)

# Absolute path and name of the directory of this file
this_dir="$(dirname "$(readlink -f "${BASH_SOURCE[0]}")")"
this_test="$(basename "${this_dir}")"

# Set up error trapping
ctrl_c(){
    trap : 0
    exit 2
}
abort(){
    exit_code=$?
    colorprint "An error occurred during ${this_test} test!" "red"
    exit ${exit_code}
}
trap 'ctrl_c' SIGINT
trap 'abort' EXIT
set -e

# Cleanup from last test run
"${this_dir}/clean"

# Generate ICs
echo "$(cat "${this_dir}/params")
output_dirs  = {'snapshot': '${this_dir}'}
output_bases = {'snapshot': 'IC'}
output_times = {'snapshot': a_begin}
initial_conditions = {
    'species': 'matter',
    'N'      : 8**3,
}
" > "${this_dir}/ic.params"
"${concept}" -n 1 -p "${this_dir}/ic.params" --local
mv "${this_dir}/IC"* "${this_dir}/IC.hdf5"

# Run the COùòïCEPT code on the generated ICs
for n in ${nprocs_list[@]}; do
    "${concept}" -n ${n} -p "${this_dir}/params" --local
    mv "${this_dir}/output" "${this_dir}/output_${n}"
done

# Analyze the output snapshots
"${concept}" -n 1 -p "${this_dir}/params" -m "${this_dir}/analyze.py" --pure-python --local

# Copy the tabulated Ewald corrections to the Gadget2 directory if it does not
# already exist there, to save time later.
if    [ ! -f "${Gadget2_dir}/ewald_spc_table_64.dat"       ] \
   && [   -f "${Gadget2_local_dir}/ewald_spc_table_64.dat" ]; then
    cp "${Gadget2_local_dir}/ewald_spc_table_64.dat" "${Gadget2_dir}/ewald_spc_table_64.dat"
fi

# Test ran successfully. Deactivate traps.
trap : 0
