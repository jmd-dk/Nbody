#!/usr/bin/env bash

# This file is part of CO𝘕CEPT, the cosmological 𝘕-body code in Python.
# Copyright © 2015–2021 Jeppe Mosgaard Dakin.
#
# CO𝘕CEPT is free software: You can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# CO𝘕CEPT is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with CO𝘕CEPT. If not, see https://www.gnu.org/licenses/
#
# The author of CO𝘕CEPT can be contacted at dakin(at)phys.au.dk
# The latest version of CO𝘕CEPT is available at
# https://github.com/jmd-dk/concept/



# This utility will update the CO𝘕CEPT or CLASS source files.
# You can run this file directly as
# utilities/update version [-y] [--class]
# or invoke it via the concept script as
# ./concept -u update version [-y] [--class]



# Absolute paths to this file and its directory
this_file="$(readlink -f "${BASH_SOURCE[0]}")"
this_dir="$(dirname "${this_file}")"

# Source the concept script
source "${this_dir}/../concept"

# Set up error trapping
ctrl_c(){
    trap : 0
    exit 2
}
abort(){
    exit_code=$?
    colorprint "An error occurred while using the \"$(basename "${this_file}")\" utility!" "red"
    exit ${exit_code}
}
if [ "${called_from_concept}" == "True" ]; then
    trap 'ctrl_c' SIGINT
    trap 'abort' EXIT
    set -e
fi

# Use Python's argparse module to handle command-line arguments
argparse_finished="False"
argparse_exit_code=""
args=$("${python}" -B -c "
import argparse, sys
# Setup command-line arguments
parser = argparse.ArgumentParser(
    prog='$(basename "${this_file}")',
    description='Run the ${esc_concept} $(basename "${this_file}") utility',
)
parser.add_argument(
    'version',
    help=(
        'version to update to. You may specify a release version '
        '(e.g. 0.2.0), the master version or a GitHub commit hash '
        '(e.g. cf3c210e12527691433f960e7d27249a545fb320).'
    ),
)
parser.add_argument(
    '-y', '--yes-to-defaults',
    default=False,
    action='store_true',
    help=(
        'accept default options on future queries '
        '(passed on to installer script)'
    ),
)
parser.add_argument(
    '--class',
    default=False,
    action='store_true',
    help=(
        'update (and patch) CLASS rather than ${esc_concept}. '
        'The version given should still be the ${esc_concept} version.'
    ),
)
# Enables Python to write directly to screen (stderr)
# in case of help request.
stdout_copy = sys.stdout
sys.stdout = sys.stderr
# Now do the actual argument parsing,
# including writing out the help message.
if '${called_from_concept}' == 'True':
    # Called from concept - Throw exception on illegal args
    args = parser.parse_args()
else:
    # Called directly - Allow what appears to be illegal args
    # (these might be known to the concept script).
    args, unknown_args = parser.parse_known_args()
# Reset stdout
sys.stdout = stdout_copy
# Print out the arguments.
# These will be captured in the Bash 'args' variable.
print('argparse_finished=True')
print('version=\"{}\"'.format(args.version))
print('yes_to_defaults=\"{}\"'.format(args.yes_to_defaults))
print('class=\"{}\"'.format(getattr(args, 'class')))
" "$@" || echo "argparse_exit_code=$?")
# Evaluate the handled arguments into this scope
eval "${args}"
# Exit if argparse exited without finishing
if [ "${argparse_finished}" != "True" ]; then
    if [ -z "${argparse_exit_code}" ]; then
        argparse_exit_code=0
    fi
    if [ ${argparse_exit_code} -eq 0 ]; then
        trap : 0
    fi
    exit ${argparse_exit_code}
fi

# If not called indirectly through the concept script,
# call the concept script now.
if [ "${called_from_concept}" != "True" ]; then
    "${concept}" -u="${this_file}" "$@"
    trap : 0
    exit 0
fi

# Borrow some functions from the (current) installer script.
# Sourcing is no good here, as we are not interested in
# actually running the installer script.
installer_functions="             \
    build_sudo_func               \
    check_system_dependency       \
    download                      \
    extract                       \
    set_package_manager_and_names \
    set_package_names             \
    validate_url                  \
"
function_definitions="$("${python}" -B -c "
import re, sys
with open('${installer}', 'r', encoding='utf-8') as file:
    installer_content = file.read()
for installer_function in '${installer_functions}'.split():
    print(re.search(rf'{installer_function}\(\).*?\n}}', installer_content, flags=re.DOTALL).group())
" )"
eval "${function_definitions}"

# Create dummy functions called by the borrowed functions
dummy_functions=(    \
    "disable_status" \
    "enable_status"  \
    "error"          \
    "heading"        \
    "set_status"     \
)
for dummy_function in "${dummy_functions[@]}"; do
eval "
${dummy_function}(){
    :
}"
done

# Check for needed system commands
set_package_manager_and_names
check_system_dependency "gzip" "${gzip_package}"
check_system_dependency "tar"  "${tar_package}"
check_system_dependency "wget" "${wget_package}"

# URLs to the CO𝘕CEPT source code and the installation script
if [[ "${version}" == *"."* ]] && [[ "${version}" != "v"* ]]; then
    version="v${version}"
fi
concept_url="https://github.com/jmd-dk/concept/archive/${version}.tar.gz"
installer_url="https://raw.githubusercontent.com/jmd-dk/concept/${version}/installer"

# Check that the specified version of CO𝘕CEPT exists
validate_url "CONCEPT" "False"
if [ "${validate_url_status}" != "success" ]; then
    colorprint "Could not find ${esc_concept} version ${version} online. \
Check out https://github.com/jmd-dk/concept/ for available versions." "red"
    exit 1
fi

# Download the installer script from the specified version
rm -rf "${top_dir}/tmp/installer"
use_current_installer="False"
if [ "${use_current_installer}" == "True" ]; then
    mkdir -p "${top_dir}/tmp/installer"
    cp "${installer}" "${top_dir}/tmp/installer/"
else
    download "installer" "False" "${installer_url}" 2>/dev/null
fi

# Get and print out update information
current_version="$("${concept}" -v | tail -n 1 || :)"
if [[ "${current_version}" == *"."* ]] && [[ "${current_version}" != "v"* ]]; then
    current_version="v${current_version}"
fi
if [ "${class}" == "False" ]; then
    printf "Update ${esc_concept} \"${current_version}\" → \"${version}\"\n"
else
    current_class_version="$(                                 \
        "${concept}"                                          \
            -m "import linear; print(linear.class__VERSION_)" \
            --pure-python                                     \
        2>/dev/null                                           \
        | tail -n 1                                           \
    )"
    if [ -z "${current_class_version}" ]; then
        current_class_version="<unknown>"
    fi
    if [ -z "${class_version}" ]; then
        class_version="$(grep "set_version.*class" "${top_dir}/tmp/installer/installer" \
            | awk '{print $NF}')"
    fi
    eval "class_version=${class_version}"
    if [[ "${class_version}" == *"."* ]] && [[ "${class_version}" != "v"* ]]; then
        class_version="v${class_version}"
    fi
    export class_version="${class_version}"
    printf "Update CLASS \"${current_class_version}\" (CLASS version) → \
\"${class_version}\" (CLASS version) / \"${version}\" (${esc_concept} version)
"
fi
if [ -z "${sleep_time}" ]; then
    eval "$(grep "sleep_time=" "${installer}" | head -n 1)"
fi
sleep ${sleep_time}
export sleep_time=0

# If it is CLASS that is to be updated, do so and exit
if [ "${class}" == "True" ]; then
    # Backup entire CLASS directory and the classy site-packages files
    mkdir -p "${top_dir}/tmp/backups"
    rm -rf "${top_dir}/tmp/backups/class"
    cp -r "${class_dir}" "${top_dir}/tmp/backups/class" 2>/dev/null || :
    python_version_major_dot_minor="$( \
        "${python}" -c "pass; \
from sys import version_info as v; \
print(str(v.major) + '.' + str(v.minor)); \
")"
    sitepackages_dir="${python_dir}/lib/python${python_version_major_dot_minor}/site-packages"
    rm -rf "${top_dir}/tmp/backups/classy"
    mkdir -p "${top_dir}/tmp/backups/classy"
    cp -r "${sitepackages_dir}/classy"* "${top_dir}/tmp/backups/classy/" 2>/dev/null || :
    # Remove CLASS and classy
    rm -rf "${class_dir}"
    for f in "${sitepackages_dir}/classy"*; do
        rm -rf "${f}" || :
    done
    # Install CLASS
    rm -rf "${top_dir}/tmp/class"
    class_dir_backup="${class_dir}"
    unset class_dir
    yes_to_defaults_flag=""
    if [ "${yes_to_defaults}" == "True" ]; then
        yes_to_defaults_flag="-y"
    fi
    concept_install="False" class_install="True" python_dir="${python_dir}" \
        check_other_running_installation="False" cleanup_tmp="False"        \
        say_welcome="False" say_copyright="False" say_goodbye="False"       \
        bash "${top_dir}/tmp/installer/installer" ${yes_to_defaults_flag} "${top_dir}"
    # Cleanup
    rm -rf "${top_dir}/tmp/installer"
    class_dir="${class_dir_backup}"
    # Test CLASS
    if [ -d "${blas_dir}" ]; then
        export LD_LIBRARY_PATH="${blas_dir}/lib:${LD_LIBRARY_PATH}"
    fi
    test_success="True"
    if ! "${python}" -B -c "
import sys
from classy import Class
cosmo = Class()
cosmo.compute()
sys.exit(int(cosmo.get_background()['proper time [Gyr]'][-1]) != 13)
" 2>/dev/null; then
        test_success="False"
    fi
    # Exit on failure
    if [ "${test_success}" == "False" ]; then
        # Reinsert and remove the CLASS and classy backups before exiting
        rm -rf "${class_dir}"
        cp -r "${top_dir}/tmp/backups/class" "${class_dir}" 2>/dev/null || :
        rm -rf "${top_dir}/tmp/backups/class"
        cp -r "${top_dir}/tmp/backups/classy/"* "${sitepackages_dir}/" 2>/dev/null || :
        rm -rf "${top_dir}/tmp/backups/classy"
        if [ -d "${top_dir}/tmp/backups" ] && [ -z "$(ls -A "${top_dir}/tmp/backups")" ]; then
            rm -rf "${top_dir}/tmp/backups"
        fi
        if [ -d "${top_dir}/tmp" ] && [ -z "$(ls -A "${top_dir}/tmp")" ]; then
            rm -rf "${top_dir}/tmp"
        fi
        colorprint "The updated CLASS did not function correctly. \
The update has been undone." "red"
        exit 1
    fi
    # Write out success message
    printf "
CLASS \"${class_version}\" (CLASS version) / \"${version}\" (${esc_concept} version) installed
"
    if [ -d "${top_dir}/tmp/backups" ]; then
        printf "
A backup of the existing CLASS code has been placed in
\"${top_dir}/tmp/backups/class\"
and
\"${top_dir}/tmp/backups/classy\"
"
    fi
    if [ -d "${reusables_dir}/class" ] && [ -n "$(ls -A "${reusables_dir}/class")" ]; then
        colorprint "\nNote" "yellow"
        printf "You should remove cached CLASS dumps. You can do so by executing
(cd \"${concept_dir}\" && source concept && make clean_class_reusables)\n\n"
    fi
    colorprint "$(basename "${this_file}") utility finished successfully" "green"
    # Exit gracefully
    trap : 0
    exit 0
else
    # Cleanup
    rm -rf "${top_dir}/tmp/installer"
fi

# Download and extract the specified version of CO𝘕CEPT
mkdir -p "${top_dir}/tmp"
rm -rf "${top_dir}/tmp/concept"
download "CONCEPT"
extract "CONCEPT"

# Take backup of all original CO𝘕CEPT files also present in the new version
backup_dir="${top_dir}/tmp/backups/concept"
rm -rf "${backup_dir}"
mkdir -p "${backup_dir}"
new_files=()
take_backup(){
    current_dir="$1"
    for file in "${current_dir}/"*; do
        if [ ! -d "${top_dir}/${file}" ] && [ ! -f "${top_dir}/${file}" ]; then
            new_files=("${new_files[@]}" "${file}")
        fi
        if [ -d "${file}" ]; then
            take_backup "${file}"
        elif [ -f "${top_dir}/${file}" ]; then
            mkdir -p "${backup_dir}/$(dirname "${file}")"
            cp "${top_dir}/${file}" "${backup_dir}/${file}"
        fi
        current_dir="$1"
    done
}
for file in "${top_dir}/tmp/concept/"*; do
    if [ -d "${file}" ]; then
        cd "${file}"
        break
    fi
done
take_backup .

# Move the new update utility, as Bash might crash
# if we removed the very script it is executing.
new_update_utility="./concept/utilities/update"
new_update_utility_moved="${this_file}_new"
if [ -f "${new_update_utility}" ]; then
    mv "${new_update_utility}" "${new_update_utility_moved}"
fi

# Copy new files into the installation directory,
# overwriting all files. Note that we do not include
# the hidden (.paths, .env) files.
cp -r ./* "${top_dir}/"
# Cleanup
cd "${top_dir}"
rm -rf "${top_dir}/tmp/concept"

# Test CO𝘕CEPT
test_success="True"
if ! "${concept}" -c "H0 = 72*km/(s*Mpc)" -m "
from commons import *
h = H0/(100*units.km/(units.s*units.Mpc))
sys.exit(not isclose(h, 0.72))
" --pure-python >/dev/null 2>&1; then
    test_success="False"
fi
# Exit on failure
if [ "${test_success}" == "False" ]; then
    # Reinsert and remove the CO𝘕CEPT backup
    # and delete newly introduced files before exiting.
    cp -r "${backup_dir}/"* "${top_dir}/"
    rm -rf "${backup_dir}"
    for file in "${new_files[@]}"; do
        rm -rf "${top_dir}/${file}" || :
    done
    if [ -d "${top_dir}/tmp/backups" ] && [ -z "$(ls -A "${top_dir}/tmp/backups")" ]; then
        rm -rf "${top_dir}/tmp/backups"
    fi
    if [ -d "${top_dir}/tmp" ] && [ -z "$(ls -A "${top_dir}/tmp")" ]; then
        rm -rf "${top_dir}/tmp"
    fi
    colorprint "The updated ${esc_concept} did not function correctly. \
The update has been undone." "red"
    exit 1
fi

# Write out success message
printf "
${esc_concept} version \"${version}\" installed
"
if [ -d "${backup_dir}" ]; then
    printf "
A backup of the existing ${esc_concept} source code has been placed in
\"${backup_dir}\"
"
fi
colorprint "$(basename "${this_file}") utility finished successfully" "green"

# For graceful exit
trap : 0

# As the very last thing, overwrite this file
# with its updated version.
if [ -f "${new_update_utility_moved}" ]; then
    mv "${new_update_utility_moved}" "${this_file}"
fi
